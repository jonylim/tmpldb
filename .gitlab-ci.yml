# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:7.2-cli

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:11

variables:
  POSTGRES_DB: tmpldb
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: secret

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - vendor/
  - node_modules/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  # Update packages
  - apt-get update -yqq
  # Prep for Node
  - apt-get install gnupg -yqq
  # Install dependencies
  - apt-get install git libcurl4-gnutls-dev libicu-dev libmcrypt-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libpq-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev -yqq
  # Install php extensions
  - docker-php-ext-install mbstring pdo_pgsql curl json intl gd xml zip bz2 opcache
  # Install & enable Xdebug for code coverage reports
  - pecl install xdebug
  - docker-php-ext-enable xdebug
  # Install Composer and project dependencies.
  - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  - php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  - php composer-setup.php --version=1.10.13
  - php -r "unlink('composer-setup.php');"
  - php composer.phar install
  # Copy over testing configuration.
  # Don't forget to set the database config in .env.testing correctly
  # DB_HOST=postgres
  # DB_DATABASE=tmpldb
  # DB_USERNAME=postgres
  # DB_PASSWORD=secret
  - cp .env.testing .env
  # Generate an application key. Re-cache.
  - php artisan key:generate
  - php artisan config:cache

stages:
  - build
  - test

migrate:
  stage: build
  tags: [ laravel, testing ]
  script:
    # Run database migrations, test rollback.
    - php artisan migrate
    - php artisan migrate:rollback
    - php artisan migrate
    # Run database seed.
    - php artisan db:seed
  only:
    - merge_requests
    - branches
  except:
    - master

test:
  stage: test
  tags: [ laravel, testing ]
  script:
    # Run laravel tests.
    - php vendor/bin/phpunit --coverage-text --colors=never 
  only:
    - merge_requests
    - branches
  except:
    - master
